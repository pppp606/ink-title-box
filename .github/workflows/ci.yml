name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel previous runs of the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality checks job - runs linting, formatting, type checking
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Type check
        run: npm run typecheck

      - name: Lint check
        run: npm run lint:check

      - name: Format check
        run: npm run format:check

  # Build job - ensures the project builds successfully
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Test job - runs tests across multiple Node.js versions
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    strategy:
      fail-fast: false
      matrix:
        node-version: ['16', '18', '20', '22']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests
        run: npm run test:ci

      - name: Upload coverage to Codecov (Node 20 only)
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Security audit job
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=high
          
      - name: Check for known vulnerabilities
        run: |
          echo "üìä Generating audit report..."
          npm audit --json > audit-report.json || true
          if [ -s audit-report.json ]; then
            echo "Audit report generated successfully"
            cat audit-report.json | jq '.vulnerabilities | length' || echo "jq not available"
          fi
          
      - name: List production dependencies
        run: |
          echo "üì¶ Production dependencies:"
          npm ls --prod --depth=0 || true

  # Integration job - combines all checks
  integration:
    name: Integration
    runs-on: ubuntu-latest
    needs: [quality, build, test, security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "Quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security audit failed"
            exit 1
          fi
          echo "All checks passed successfully!"

      - name: Post success status
        if: success()
        run: echo "üéâ All CI checks passed! Ready for merge."

      - name: Post failure status
        if: failure()
        run: |
          echo "‚ùå Some CI checks failed. Please review the logs above."
          exit 1
